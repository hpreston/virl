# coding: utf-8

"""
    VIRL STD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AdminApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def simengine_rest_admin_list_user_get(self, user, **kwargs):
        """
        Get a list of all currently launched simulations
        Get a list of all currently launched simulations, optionally filtered by `user`. This call is mainly intended for administrative monitoring of STD. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_list_user_get(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user: username or keyword `__all__` (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_admin_list_user_get_with_http_info(user, **kwargs)
        else:
            (data) = self.simengine_rest_admin_list_user_get_with_http_info(user, **kwargs)
            return data

    def simengine_rest_admin_list_user_get_with_http_info(self, user, **kwargs):
        """
        Get a list of all currently launched simulations
        Get a list of all currently launched simulations, optionally filtered by `user`. This call is mainly intended for administrative monitoring of STD. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_list_user_get_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user: username or keyword `__all__` (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_admin_list_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `simengine_rest_admin_list_user_get`")


        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/admin-list/{user}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_admin_stop_user_simulation_put(self, user, simulation, wait, **kwargs):
        """
        Stop a particular simulation or set of simulations
        Stop a particular simulation or all simulations of one / all users. This call is mainly intended for administrative cleanup of STD. An admin user is required to perform this call. `__all__` can be used instead of simulation ID or username.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_stop_user_simulation_put(user, simulation, wait, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user: username or keyword `__all__` (required)
        :param str simulation: simulation id or keyword `__all__` (required)
        :param str wait: number of seconds to wait for session stop, default = `0` (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_admin_stop_user_simulation_put_with_http_info(user, simulation, wait, **kwargs)
        else:
            (data) = self.simengine_rest_admin_stop_user_simulation_put_with_http_info(user, simulation, wait, **kwargs)
            return data

    def simengine_rest_admin_stop_user_simulation_put_with_http_info(self, user, simulation, wait, **kwargs):
        """
        Stop a particular simulation or set of simulations
        Stop a particular simulation or all simulations of one / all users. This call is mainly intended for administrative cleanup of STD. An admin user is required to perform this call. `__all__` can be used instead of simulation ID or username.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_stop_user_simulation_put_with_http_info(user, simulation, wait, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user: username or keyword `__all__` (required)
        :param str simulation: simulation id or keyword `__all__` (required)
        :param str wait: number of seconds to wait for session stop, default = `0` (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'simulation', 'wait']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_admin_stop_user_simulation_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `simengine_rest_admin_stop_user_simulation_put`")
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_admin_stop_user_simulation_put`")
        # verify the required parameter 'wait' is set
        if ('wait' not in params) or (params['wait'] is None):
            raise ValueError("Missing the required parameter `wait` when calling `simengine_rest_admin_stop_user_simulation_put`")


        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'wait' in params:
            query_params.append(('wait', params['wait']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/admin-stop/{user}/{simulation}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_admin_update_simulation_expiry_put(self, simulation, user, **kwargs):
        """
        Update simulation expiration
        Get a list of all currently launched simulations, optionally filtered by `user`. This call is mainly intended for administrative monitoring of STD. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_update_simulation_expiry_put(simulation, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: simulation ID (required)
        :param str user: name of the user that launched the simulation (required)
        :param str expires: number of minutes or datetime when the simulation will be automatically terminated. If not given, expiration will be reset
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_admin_update_simulation_expiry_put_with_http_info(simulation, user, **kwargs)
        else:
            (data) = self.simengine_rest_admin_update_simulation_expiry_put_with_http_info(simulation, user, **kwargs)
            return data

    def simengine_rest_admin_update_simulation_expiry_put_with_http_info(self, simulation, user, **kwargs):
        """
        Update simulation expiration
        Get a list of all currently launched simulations, optionally filtered by `user`. This call is mainly intended for administrative monitoring of STD. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_admin_update_simulation_expiry_put_with_http_info(simulation, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: simulation ID (required)
        :param str user: name of the user that launched the simulation (required)
        :param str expires: number of minutes or datetime when the simulation will be automatically terminated. If not given, expiration will be reset
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'user', 'expires']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_admin_update_simulation_expiry_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_admin_update_simulation_expiry_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `simengine_rest_admin_update_simulation_expiry_put`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))
        if 'expires' in params:
            query_params.append(('expires', params['expires']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/admin-update/{simulation}/expiry', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_jobs_get(self, **kwargs):
        """
        Get current job processing information
        Get current job processing information. Stub implemented for compatibility with other VMMaestro backends. Returns an empty list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_jobs_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_jobs_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_jobs_get_with_http_info(**kwargs)
            return data

    def simengine_rest_jobs_get_with_http_info(self, **kwargs):
        """
        Get current job processing information
        Get current job processing information. Stub implemented for compatibility with other VMMaestro backends. Returns an empty list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_jobs_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_jobs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/jobs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_licensing_get(self, **kwargs):
        """
        Get information on licensing
        Get information on licensing. This call is mainly intended for the GUI at topology launch time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_licensing_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_licensing_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_licensing_get_with_http_info(**kwargs)
            return data

    def simengine_rest_licensing_get_with_http_info(self, **kwargs):
        """
        Get information on licensing
        Get information on licensing. This call is mainly intended for the GUI at topology launch time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_licensing_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_licensing_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/licensing', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_systemlogs_get(self, **kwargs):
        """
        Get a zip-file of all current logs
        Get a zip-file of all current logs, from STD, UWM and lmgrd. This call is mainly intended for assisting troubleshooting. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_systemlogs_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_systemlogs_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_systemlogs_get_with_http_info(**kwargs)
            return data

    def simengine_rest_systemlogs_get_with_http_info(self, **kwargs):
        """
        Get a zip-file of all current logs
        Get a zip-file of all current logs, from STD, UWM and lmgrd. This call is mainly intended for assisting troubleshooting. An admin user is required to perform this call.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_systemlogs_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_systemlogs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/systemlogs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_test_get(self, **kwargs):
        """
        List simengine API version and features, compatibility check
        Verify the user is authenticated and return simengine API version. Also checks for client compatibility if provided against internal config. The client takes the form ClientName-ClientVersion (split on first dash). If the client is known to STD, returns a bool (true or false), if client info is not provided, or unknown, return null. Also displays supported features list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_test_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str error_unknown: Client identification for compatibility check, in format client-version, will return `{  \"client-compatible\": true|false|null }` instead. `null` indicates an unknown client
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_test_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_test_get_with_http_info(**kwargs)
            return data

    def simengine_rest_test_get_with_http_info(self, **kwargs):
        """
        List simengine API version and features, compatibility check
        Verify the user is authenticated and return simengine API version. Also checks for client compatibility if provided against internal config. The client takes the form ClientName-ClientVersion (split on first dash). If the client is known to STD, returns a bool (true or false), if client info is not provided, or unknown, return null. Also displays supported features list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_test_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str error_unknown: Client identification for compatibility check, in format client-version, will return `{  \"client-compatible\": true|false|null }` instead. `null` indicates an unknown client
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_unknown']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_test_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'error_unknown' in params:
            query_params.append(('', params['error_unknown']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/test', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
