# coding: utf-8

"""
    VIRL STD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SimengineApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def simengine_rest_calculate_requirements_post(self, **kwargs):
        """
        Calculate hardware requirements
        Calculate hardware requirements for given topology.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_calculate_requirements_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_calculate_requirements_post_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_calculate_requirements_post_with_http_info(**kwargs)
            return data

    def simengine_rest_calculate_requirements_post_with_http_info(self, **kwargs):
        """
        Calculate hardware requirements
        Calculate hardware requirements for given topology.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_calculate_requirements_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_calculate_requirements_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/calculate-requirements', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_events_simulation_get(self, simulation, **kwargs):
        """
        Return a list of recent events recorded for a simulation
        Return a list of recent events recorded for a simulation. The response is a list of event dicts. If the request includes a sinceID, the response only contains events whose identifier is larger than the one set. It is safe to set sinceID = -1 if all events shall be retrieved. The current implementation returns exactly the same information as the `messages` key in the simengine-status response, albeit in a different format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_events_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param str since_id: wait until simulation statusID changes from this value
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_events_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_events_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_events_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Return a list of recent events recorded for a simulation
        Return a list of recent events recorded for a simulation. The response is a list of event dicts. If the request includes a sinceID, the response only contains events whose identifier is larger than the one set. It is safe to set sinceID = -1 if all events shall be retrieved. The current implementation returns exactly the same information as the `messages` key in the simengine-status response, albeit in a different format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_events_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param str since_id: wait until simulation statusID changes from this value
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'since_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_events_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_events_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'since_id' in params:
            query_params.append(('sinceID', params['since_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/events/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_export_simulation_get(self, simulation, **kwargs):
        """
        Retrieve original VIRL XML Topology file
        Returns the original VIRL XML Topology file (or an equivalent serialization of it). Optionally, the dynamically-assigned IP addresses and prefixes are put into the file node and interface attributes and extension entries. Optionally, the running, startup, or startup-updated (by copying running config into startup config) configurations are retrieved over the serial ports of selected nodes that support it (i.e. all reference platforms). The downloaded configurations are put into extension entries which are the value of the options enabling the download; all three types are permitted for download at once, provided they end up in different extension entries. Downloads are only attempted on ACTIVE nodes if the subtype supports it. If some, but not all downloads fail, a 206 Partial Content is returned to indicate this condition. If all attempted downloads fail, a 500 response is generated.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_export_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param bool updated: push information on dynamic IP addresses
        :param str startup_updated_configs: extension name for startup-updated config
        :param str download_configs: alias of startup-updated-configs (backwards compatibility)
        :param str running_configs: extension name for running config
        :param str startup_configs: extension name for startup config
        :param list[str] nodes: select nodes to return by name or XPath expression - defaults to all nodes
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_export_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_export_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_export_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Retrieve original VIRL XML Topology file
        Returns the original VIRL XML Topology file (or an equivalent serialization of it). Optionally, the dynamically-assigned IP addresses and prefixes are put into the file node and interface attributes and extension entries. Optionally, the running, startup, or startup-updated (by copying running config into startup config) configurations are retrieved over the serial ports of selected nodes that support it (i.e. all reference platforms). The downloaded configurations are put into extension entries which are the value of the options enabling the download; all three types are permitted for download at once, provided they end up in different extension entries. Downloads are only attempted on ACTIVE nodes if the subtype supports it. If some, but not all downloads fail, a 206 Partial Content is returned to indicate this condition. If all attempted downloads fail, a 500 response is generated.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_export_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param bool updated: push information on dynamic IP addresses
        :param str startup_updated_configs: extension name for startup-updated config
        :param str download_configs: alias of startup-updated-configs (backwards compatibility)
        :param str running_configs: extension name for running config
        :param str startup_configs: extension name for startup config
        :param list[str] nodes: select nodes to return by name or XPath expression - defaults to all nodes
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'updated', 'startup_updated_configs', 'download_configs', 'running_configs', 'startup_configs', 'nodes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_export_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_export_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'updated' in params:
            query_params.append(('updated', params['updated']))
        if 'startup_updated_configs' in params:
            query_params.append(('startup-updated-configs', params['startup_updated_configs']))
        if 'download_configs' in params:
            query_params.append(('download-configs', params['download_configs']))
        if 'running_configs' in params:
            query_params.append(('running-configs', params['running_configs']))
        if 'startup_configs' in params:
            query_params.append(('startup-configs', params['startup_configs']))
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/export/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_launch_post(self, **kwargs):
        """
        Create a new simulation
        Create a new simulation and schedule its start. By default, the response is sent as soon as it is determined that the session launch is likely to succeed, but before any VM nodes are deployed. The user may therefore follow status updates on startup progress. To wait for VM nodes to deploy, set the 'wait' parameter. It is possible to change/add three parameters 'mgmt_...' to the simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_launch_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str session: force exact name for the simulation
        :param str file: filename of the original .virl file - used as a base name
        :param bool mgmt_lxc: overrides .virl file's management LXC settings e.g. `True` - run with management LXC
        :param str mgmt_network: override management network name
        :param int mgmt_lxc_tcp_port: override management LXC management port number
        :param str version: forces fail if versions mismatch
        :param str wait: delay simulation start - time in minutes or datetime
        :param str expires: simulation expiration - time in minutes or datetime
        :param str mgmt_lxc_static_ip: override management LXC's static IP
        :param int static_serial_port_offset: override offset for static port mapping
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_launch_post_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_launch_post_with_http_info(**kwargs)
            return data

    def simengine_rest_launch_post_with_http_info(self, **kwargs):
        """
        Create a new simulation
        Create a new simulation and schedule its start. By default, the response is sent as soon as it is determined that the session launch is likely to succeed, but before any VM nodes are deployed. The user may therefore follow status updates on startup progress. To wait for VM nodes to deploy, set the 'wait' parameter. It is possible to change/add three parameters 'mgmt_...' to the simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_launch_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str session: force exact name for the simulation
        :param str file: filename of the original .virl file - used as a base name
        :param bool mgmt_lxc: overrides .virl file's management LXC settings e.g. `True` - run with management LXC
        :param str mgmt_network: override management network name
        :param int mgmt_lxc_tcp_port: override management LXC management port number
        :param str version: forces fail if versions mismatch
        :param str wait: delay simulation start - time in minutes or datetime
        :param str expires: simulation expiration - time in minutes or datetime
        :param str mgmt_lxc_static_ip: override management LXC's static IP
        :param int static_serial_port_offset: override offset for static port mapping
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session', 'file', 'mgmt_lxc', 'mgmt_network', 'mgmt_lxc_tcp_port', 'version', 'wait', 'expires', 'mgmt_lxc_static_ip', 'static_serial_port_offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_launch_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session' in params:
            query_params.append(('session', params['session']))
        if 'file' in params:
            query_params.append(('file', params['file']))
        if 'mgmt_lxc' in params:
            query_params.append(('mgmt_lxc', params['mgmt_lxc']))
        if 'mgmt_network' in params:
            query_params.append(('mgmt_network', params['mgmt_network']))
        if 'mgmt_lxc_tcp_port' in params:
            query_params.append(('mgmt_lxc_tcp_port', params['mgmt_lxc_tcp_port']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'wait' in params:
            query_params.append(('wait', params['wait']))
        if 'expires' in params:
            query_params.append(('expires', params['expires']))
        if 'mgmt_lxc_static_ip' in params:
            query_params.append(('mgmt_lxc_static_ip', params['mgmt_lxc_static_ip']))
        if 'static_serial_port_offset' in params:
            query_params.append(('static_serial_port_offset', params['static_serial_port_offset']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/launch', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_list_get(self, **kwargs):
        """
        Get a list of all simulations of this user, and the status of each simulation.
        Get a list of all simulations of this user, and the status of each simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_list_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_list_get_with_http_info(**kwargs)
            return data

    def simengine_rest_list_get_with_http_info(self, **kwargs):
        """
        Get a list of all simulations of this user, and the status of each simulation.
        Get a list of all simulations of this user, and the status of each simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/list', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_nodes_simulation_get(self, simulation, **kwargs):
        """
        List simulation nodes.
        List simulation nodes.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_nodes_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: simulation ID (required)
        :param list[str] nodes: select nodes for return by name or XPath, defaults to all nodes
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_nodes_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_nodes_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_nodes_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        List simulation nodes.
        List simulation nodes.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_nodes_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: simulation ID (required)
        :param list[str] nodes: select nodes for return by name or XPath, defaults to all nodes
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'nodes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_nodes_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_nodes_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/nodes/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_serial_port_simulation_get(self, simulation, **kwargs):
        """
        Return links to VM node serial ports.
        Return links to VM node serial ports.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_serial_port_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to return by name or XPath expression - defaults to all nodes
        :param str mode: serial port connection type
        :param int port: serial port name or number (0 - console, 1 - monitor, 2 - aux) defaults to console
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_serial_port_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_serial_port_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_serial_port_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Return links to VM node serial ports.
        Return links to VM node serial ports.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_serial_port_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to return by name or XPath expression - defaults to all nodes
        :param str mode: serial port connection type
        :param int port: serial port name or number (0 - console, 1 - monitor, 2 - aux) defaults to console
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'nodes', 'mode', 'port']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_serial_port_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_serial_port_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'
        if 'mode' in params:
            query_params.append(('mode', params['mode']))
        if 'port' in params:
            query_params.append(('port', params['port']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/serial_port/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_status_simulation_get(self, simulation, **kwargs):
        """
        Return the status of a launched simulation
        Return the status of a launched simulation and user-visible messages. The response includes a statusID marker for the simulation. If the request includes a sinceID, the response waits until a status change occurs, or an internal timeout is exceeded to avoid blocking the server. If the simulation cannot be found (it was presumably deleted), a status is returned nonetheless, with the simulation status field being equal to `DONE`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_status_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param str since_id: wait until simulation statusID changes from this value
        :param str node_states: also return state nodes under the key `nodes` if the session exists and was not stopped (is not in state `DONE`)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_status_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_status_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_status_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Return the status of a launched simulation
        Return the status of a launched simulation and user-visible messages. The response includes a statusID marker for the simulation. If the request includes a sinceID, the response waits until a status change occurs, or an internal timeout is exceeded to avoid blocking the server. If the simulation cannot be found (it was presumably deleted), a status is returned nonetheless, with the simulation status field being equal to `DONE`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_status_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param str since_id: wait until simulation statusID changes from this value
        :param str node_states: also return state nodes under the key `nodes` if the session exists and was not stopped (is not in state `DONE`)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'since_id', 'node_states']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_status_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_status_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'since_id' in params:
            query_params.append(('sinceID', params['since_id']))
        if 'node_states' in params:
            query_params.append(('node_states', params['node_states']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/status/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_stop_simulation_get(self, simulation, **kwargs):
        """
        Schedule complete stop of a launched simulation
        Schedule complete stop of a launched simulation. By default, the response is sent as soon as it is determined that the session stop is likely to succeed, but before any VM nodes are destroyed. The user may therefore follow status updates on teardown progress. To wait for the complete stop of the session, set the `wait` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_stop_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param int wait: number of seconds to wait for stopping the session
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_stop_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_stop_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_stop_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Schedule complete stop of a launched simulation
        Schedule complete stop of a launched simulation. By default, the response is sent as soon as it is determined that the session stop is likely to succeed, but before any VM nodes are destroyed. The user may therefore follow status updates on teardown progress. To wait for the complete stop of the session, set the `wait` parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_stop_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param int wait: number of seconds to wait for stopping the session
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'wait']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_stop_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_stop_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'wait' in params:
            query_params.append(('wait', params['wait']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/stop/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_tracking_post(self, **kwargs):
        """
        Authorize a new simulation tracking channel
        Authorize a new simulation tracking channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str session_id: filter future tracking messages by session ID
        :param str topics: filter future tracking messages by their topics
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_tracking_post_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_tracking_post_with_http_info(**kwargs)
            return data

    def simengine_rest_tracking_post_with_http_info(self, **kwargs):
        """
        Authorize a new simulation tracking channel
        Authorize a new simulation tracking channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str session_id: filter future tracking messages by session ID
        :param str topics: filter future tracking messages by their topics
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'topics']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_tracking_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session_id' in params:
            query_params.append(('session_id', params['session_id']))
        if 'topics' in params:
            query_params.append(('topics', params['topics']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/tracking', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_tracking_tracking_id_delete(self, tracking_id, **kwargs):
        """
        Deauthorize a simulation tracking channel.
        Deauthorize a simulation tracking channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_tracking_id_delete(tracking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tracking_id: ID of tracking (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_tracking_tracking_id_delete_with_http_info(tracking_id, **kwargs)
        else:
            (data) = self.simengine_rest_tracking_tracking_id_delete_with_http_info(tracking_id, **kwargs)
            return data

    def simengine_rest_tracking_tracking_id_delete_with_http_info(self, tracking_id, **kwargs):
        """
        Deauthorize a simulation tracking channel.
        Deauthorize a simulation tracking channel.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_tracking_id_delete_with_http_info(tracking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tracking_id: ID of tracking (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_tracking_tracking_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracking_id' is set
        if ('tracking_id' not in params) or (params['tracking_id'] is None):
            raise ValueError("Missing the required parameter `tracking_id` when calling `simengine_rest_tracking_tracking_id_delete`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tracking_id' in params:
            query_params.append(('tracking_id', params['tracking_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/tracking/{tracking_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_tracking_tracking_id_get(self, tracking_id, **kwargs):
        """
        Retrieve information on a simulation tracking channel
        Retrieve information on a simulation tracking channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_tracking_id_get(tracking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tracking_id: ID of tracking (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_tracking_tracking_id_get_with_http_info(tracking_id, **kwargs)
        else:
            (data) = self.simengine_rest_tracking_tracking_id_get_with_http_info(tracking_id, **kwargs)
            return data

    def simengine_rest_tracking_tracking_id_get_with_http_info(self, tracking_id, **kwargs):
        """
        Retrieve information on a simulation tracking channel
        Retrieve information on a simulation tracking channel
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_tracking_tracking_id_get_with_http_info(tracking_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str tracking_id: ID of tracking (required)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tracking_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_tracking_tracking_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tracking_id' is set
        if ('tracking_id' not in params) or (params['tracking_id'] is None):
            raise ValueError("Missing the required parameter `tracking_id` when calling `simengine_rest_tracking_tracking_id_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tracking_id' in params:
            query_params.append(('tracking_id', params['tracking_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/tracking/{tracking_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_update_simulation_start_get(self, simulation, **kwargs):
        """
        Start simulation nodes previously stopped by simengine-update-stop
        Start simulation nodes previously stopped by simengine-update-stop. Returns list of nodes which needed to start, as soon as all node deploy calls are made. The call does not wait until the nodes are deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_update_simulation_start_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to start by name or XPath expression - defaults to all nodes
        :param int wait: number of seconds to wait for nodes stop
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_update_simulation_start_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_update_simulation_start_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_update_simulation_start_get_with_http_info(self, simulation, **kwargs):
        """
        Start simulation nodes previously stopped by simengine-update-stop
        Start simulation nodes previously stopped by simengine-update-stop. Returns list of nodes which needed to start, as soon as all node deploy calls are made. The call does not wait until the nodes are deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_update_simulation_start_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to start by name or XPath expression - defaults to all nodes
        :param int wait: number of seconds to wait for nodes stop
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'nodes', 'wait']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_update_simulation_start_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_update_simulation_start_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'
        if 'wait' in params:
            query_params.append(('wait', params['wait']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/update/{simulation}/start', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_update_simulation_stop_put(self, simulation, **kwargs):
        """
        Stop simulation nodes without tearing down the simulation
        Stop simulation nodes without tearing down the simulation. Returns list of nodes which needed to stop, as soon as all node destroy calls are made. The call does not wait until the nodes are torn down.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_update_simulation_stop_put(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to stop by name or XPath expression - defaults to all nodes
        :param int wait: number of seconds to wait for nodes stop
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_update_simulation_stop_put_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_update_simulation_stop_put_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_update_simulation_stop_put_with_http_info(self, simulation, **kwargs):
        """
        Stop simulation nodes without tearing down the simulation
        Stop simulation nodes without tearing down the simulation. Returns list of nodes which needed to stop, as soon as all node destroy calls are made. The call does not wait until the nodes are torn down.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_update_simulation_stop_put_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] nodes: select nodes to stop by name or XPath expression - defaults to all nodes
        :param int wait: number of seconds to wait for nodes stop
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'nodes', 'wait']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_update_simulation_stop_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_update_simulation_stop_put`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'
        if 'wait' in params:
            query_params.append(('wait', params['wait']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/update/{simulation}/stop', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_updates_get(self, **kwargs):
        """
        Get a list of all simulations of this user, and the status of each simulation.
        Get information about current versions and available updates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_updates_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_updates_get_with_http_info(**kwargs)
        else:
            (data) = self.simengine_rest_updates_get_with_http_info(**kwargs)
            return data

    def simengine_rest_updates_get_with_http_info(self, **kwargs):
        """
        Get a list of all simulations of this user, and the status of each simulation.
        Get information about current versions and available updates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_updates_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_updates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/updates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_vnc_console_simulation_get(self, simulation, **kwargs):
        """
        Return links to VM node VNC consoles
        Return links to VM node VNC consoles. While each VM Node supports a VNC console, the reference platform routers cannot interact over this connection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_vnc_console_simulation_get(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] node: select nodes to return by name or XPath expression - defaults to all nodes
        :param str mode: serial port connection type
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_vnc_console_simulation_get_with_http_info(simulation, **kwargs)
        else:
            (data) = self.simengine_rest_vnc_console_simulation_get_with_http_info(simulation, **kwargs)
            return data

    def simengine_rest_vnc_console_simulation_get_with_http_info(self, simulation, **kwargs):
        """
        Return links to VM node VNC consoles
        Return links to VM node VNC consoles. While each VM Node supports a VNC console, the reference platform routers cannot interact over this connection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_vnc_console_simulation_get_with_http_info(simulation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation: Simulation ID (required)
        :param list[str] node: select nodes to return by name or XPath expression - defaults to all nodes
        :param str mode: serial port connection type
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation', 'node', 'mode']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_vnc_console_simulation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation' is set
        if ('simulation' not in params) or (params['simulation'] is None):
            raise ValueError("Missing the required parameter `simulation` when calling `simengine_rest_vnc_console_simulation_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation' in params:
            path_params['simulation'] = params['simulation']

        query_params = []
        if 'node' in params:
            query_params.append(('node', params['node']))
            collection_formats['node'] = 'csv'
        if 'mode' in params:
            query_params.append(('mode', params['mode']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/vnc_console/{simulation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
