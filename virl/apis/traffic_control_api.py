# coding: utf-8

"""
    VIRL STD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TrafficControlApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def simengine_rest_shaping_interfaces_simulation_id_delete(self, simulation_id, **kwargs):
        """
        Delete interface-level traffic control settings for all links in simulation
        Delete interface-level traffic control settings for all interfaces in simulation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_simulation_id_delete(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_interfaces_simulation_id_delete_with_http_info(simulation_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_interfaces_simulation_id_delete_with_http_info(simulation_id, **kwargs)
            return data

    def simengine_rest_shaping_interfaces_simulation_id_delete_with_http_info(self, simulation_id, **kwargs):
        """
        Delete interface-level traffic control settings for all links in simulation
        Delete interface-level traffic control settings for all interfaces in simulation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_simulation_id_delete_with_http_info(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_interfaces_simulation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_interfaces_simulation_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping-interfaces/{simulation_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsinterfacesShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_interfaces_simulation_id_get(self, simulation_id, **kwargs):
        """
        List interface-level traffic control settings
        Get interface-level traffic control settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_simulation_id_get(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_interfaces_simulation_id_get_with_http_info(simulation_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_interfaces_simulation_id_get_with_http_info(simulation_id, **kwargs)
            return data

    def simengine_rest_shaping_interfaces_simulation_id_get_with_http_info(self, simulation_id, **kwargs):
        """
        List interface-level traffic control settings
        Get interface-level traffic control settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_simulation_id_get_with_http_info(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_interfaces_simulation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_interfaces_simulation_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping-interfaces/{simulation_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsinterfacesShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get(self, simulation_id, node_id, **kwargs):
        """
        List interface-level traffic control settings for a given node in simulation
        Get interface-level traffic control settings for a given node in simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get(simulation_id, node_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get_with_http_info(simulation_id, node_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get_with_http_info(simulation_id, node_id, **kwargs)
            return data

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get_with_http_info(self, simulation_id, node_id, **kwargs):
        """
        List interface-level traffic control settings for a given node in simulation
        Get interface-level traffic control settings for a given node in simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get_with_http_info(simulation_id, node_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :return: StdDefsJsondefinitionsinterfacesShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'node_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get`")
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params) or (params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'node_id' in params:
            path_params['node id'] = params['node_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping-interfaces/{string:simulation_id}/{string:node_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsinterfacesShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get(self, simulation_id, node_id, iface_id, **kwargs):
        """
        List interface-level traffic control setting for a given interface of node in simulation
        Get interface-level traffic control setting for a given interface of node in simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get(simulation_id, node_id, iface_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :param str iface_id: (required)
        :return: StdDefsJsondefinitionsinterfaceShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get_with_http_info(simulation_id, node_id, iface_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get_with_http_info(simulation_id, node_id, iface_id, **kwargs)
            return data

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get_with_http_info(self, simulation_id, node_id, iface_id, **kwargs):
        """
        List interface-level traffic control setting for a given interface of node in simulation
        Get interface-level traffic control setting for a given interface of node in simulation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get_with_http_info(simulation_id, node_id, iface_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :param str iface_id: (required)
        :return: StdDefsJsondefinitionsinterfaceShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'node_id', 'iface_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get`")
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params) or (params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get`")
        # verify the required parameter 'iface_id' is set
        if ('iface_id' not in params) or (params['iface_id'] is None):
            raise ValueError("Missing the required parameter `iface_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'node_id' in params:
            path_params['node id'] = params['node_id']
        if 'iface_id' in params:
            path_params['iface id'] = params['iface_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping-interfaces/{string:simulation_id}/{string:node_id}/{string:iface_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsinterfaceShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put(self, simulation_id, node_id, interface_id, shaping, **kwargs):
        """
        Set interface-level traffic control settings for particular interface
        Set interface-level traffic control settings for a given interface
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put(simulation_id, node_id, interface_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :param str interface_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put_with_http_info(simulation_id, node_id, interface_id, shaping, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put_with_http_info(simulation_id, node_id, interface_id, shaping, **kwargs)
            return data

    def simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put_with_http_info(self, simulation_id, node_id, interface_id, shaping, **kwargs):
        """
        Set interface-level traffic control settings for particular interface
        Set interface-level traffic control settings for a given interface
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put_with_http_info(simulation_id, node_id, interface_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str node_id: (required)
        :param str interface_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'node_id', 'interface_id', 'shaping']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put`")
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params) or (params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put`")
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params) or (params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put`")
        # verify the required parameter 'shaping' is set
        if ('shaping' not in params) or (params['shaping'] is None):
            raise ValueError("Missing the required parameter `shaping` when calling `simengine_rest_shaping_interfaces_stringsimulation_id_stringnode_id_stringiface_id_put`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'node_id' in params:
            path_params['node id'] = params['node_id']
        if 'interface_id' in params:
            path_params['interface id'] = params['interface_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shaping' in params:
            body_params = params['shaping']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping-interfaces/{string:simulation_id}/{string:node_id}/{string:iface_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsshaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_simulation_id_delete(self, simulation_id, **kwargs):
        """
        Delete link-level traffic control settings for all links in simulation
        Delete link-level traffic control settings for all links in simulation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_delete(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_simulation_id_delete_with_http_info(simulation_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_simulation_id_delete_with_http_info(simulation_id, **kwargs)
            return data

    def simengine_rest_shaping_simulation_id_delete_with_http_info(self, simulation_id, **kwargs):
        """
        Delete link-level traffic control settings for all links in simulation
        Delete link-level traffic control settings for all links in simulation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_delete_with_http_info(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_simulation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_simulation_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping/{simulation_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionslinksShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_simulation_id_get(self, simulation_id, **kwargs):
        """
        List link-level traffic control settings
        Get link-level traffic control settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_get(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_simulation_id_get_with_http_info(simulation_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_simulation_id_get_with_http_info(simulation_id, **kwargs)
            return data

    def simengine_rest_shaping_simulation_id_get_with_http_info(self, simulation_id, **kwargs):
        """
        List link-level traffic control settings
        Get link-level traffic control settings
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_get_with_http_info(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_simulation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_simulation_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping/{simulation_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionslinksShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_simulation_id_link_id_delete(self, simulation_id, link_id, shaping, **kwargs):
        """
        Delete link-level traffic control settings for particular link
        Delete link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_delete(simulation_id, link_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_simulation_id_link_id_delete_with_http_info(simulation_id, link_id, shaping, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_simulation_id_link_id_delete_with_http_info(simulation_id, link_id, shaping, **kwargs)
            return data

    def simengine_rest_shaping_simulation_id_link_id_delete_with_http_info(self, simulation_id, link_id, shaping, **kwargs):
        """
        Delete link-level traffic control settings for particular link
        Delete link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_delete_with_http_info(simulation_id, link_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'link_id', 'shaping']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_simulation_id_link_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_simulation_id_link_id_delete`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `simengine_rest_shaping_simulation_id_link_id_delete`")
        # verify the required parameter 'shaping' is set
        if ('shaping' not in params) or (params['shaping'] is None):
            raise ValueError("Missing the required parameter `shaping` when calling `simengine_rest_shaping_simulation_id_link_id_delete`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'link_id' in params:
            path_params['link id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shaping' in params:
            body_params = params['shaping']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping/{simulation_id}/{link_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsshaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_simulation_id_link_id_get(self, simulation_id, link_id, **kwargs):
        """
        List link-level traffic control settings for a given link
        Get link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_get(simulation_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_simulation_id_link_id_get_with_http_info(simulation_id, link_id, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_simulation_id_link_id_get_with_http_info(simulation_id, link_id, **kwargs)
            return data

    def simengine_rest_shaping_simulation_id_link_id_get_with_http_info(self, simulation_id, link_id, **kwargs):
        """
        List link-level traffic control settings for a given link
        Get link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_get_with_http_info(simulation_id, link_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :return: StdDefsJsondefinitionslinksShaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'link_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_simulation_id_link_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_simulation_id_link_id_get`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `simengine_rest_shaping_simulation_id_link_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'link_id' in params:
            path_params['link id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping/{simulation_id}/{link_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionslinksShaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def simengine_rest_shaping_simulation_id_link_id_put(self, simulation_id, link_id, shaping, **kwargs):
        """
        Set link-level traffic control settings for particular link
        Set link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_put(simulation_id, link_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_shaping_simulation_id_link_id_put_with_http_info(simulation_id, link_id, shaping, **kwargs)
        else:
            (data) = self.simengine_rest_shaping_simulation_id_link_id_put_with_http_info(simulation_id, link_id, shaping, **kwargs)
            return data

    def simengine_rest_shaping_simulation_id_link_id_put_with_http_info(self, simulation_id, link_id, shaping, **kwargs):
        """
        Set link-level traffic control settings for particular link
        Set link-level traffic control settings for a given link
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_shaping_simulation_id_link_id_put_with_http_info(simulation_id, link_id, shaping, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: (required)
        :param str link_id: (required)
        :param Shaping shaping: (required)
        :return: StdDefsJsondefinitionsshaping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'link_id', 'shaping']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_shaping_simulation_id_link_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_shaping_simulation_id_link_id_put`")
        # verify the required parameter 'link_id' is set
        if ('link_id' not in params) or (params['link_id'] is None):
            raise ValueError("Missing the required parameter `link_id` when calling `simengine_rest_shaping_simulation_id_link_id_put`")
        # verify the required parameter 'shaping' is set
        if ('shaping' not in params) or (params['shaping'] is None):
            raise ValueError("Missing the required parameter `shaping` when calling `simengine_rest_shaping_simulation_id_link_id_put`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']
        if 'link_id' in params:
            path_params['link id'] = params['link_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shaping' in params:
            body_params = params['shaping']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/shaping/{simulation_id}/{link_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsshaping',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
