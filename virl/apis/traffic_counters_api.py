# coding: utf-8

"""
    VIRL STD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TrafficCountersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def simengine_rest_counters_simulation_id_get(self, simulation_id, **kwargs):
        """
        List traffic on particular interfaces.
        List traffic on particular interfaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_counters_simulation_id_get(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: simulation ID (required)
        :param list[str] nodes: filter reported statistics by node (optional, defaults to all)
        :param list[str] networks: filter reported statistics by network (optional, defaults to all)
        :param list[str] interfaces: filter reported statistics by interface (optional, defaults to all)
        :param str type: can be one of 'total' / 'rate' / 'avg' - type of report to generate (optional, defaults to 'total')
        :param int step: group values into groups of <step> (optional, defaults to 1)
        :param int count: number of values to return / consider in generating the stats. (optional, defaults to 1)
        :param str datetype: ending point for the timeframe, in iso8601 format, e.g. 2016-04-15T12:47:00.000Z
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.simengine_rest_counters_simulation_id_get_with_http_info(simulation_id, **kwargs)
        else:
            (data) = self.simengine_rest_counters_simulation_id_get_with_http_info(simulation_id, **kwargs)
            return data

    def simengine_rest_counters_simulation_id_get_with_http_info(self, simulation_id, **kwargs):
        """
        List traffic on particular interfaces.
        List traffic on particular interfaces.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simengine_rest_counters_simulation_id_get_with_http_info(simulation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str simulation_id: simulation ID (required)
        :param list[str] nodes: filter reported statistics by node (optional, defaults to all)
        :param list[str] networks: filter reported statistics by network (optional, defaults to all)
        :param list[str] interfaces: filter reported statistics by interface (optional, defaults to all)
        :param str type: can be one of 'total' / 'rate' / 'avg' - type of report to generate (optional, defaults to 'total')
        :param int step: group values into groups of <step> (optional, defaults to 1)
        :param int count: number of values to return / consider in generating the stats. (optional, defaults to 1)
        :param str datetype: ending point for the timeframe, in iso8601 format, e.g. 2016-04-15T12:47:00.000Z
        :return: StdDefsJsondefinitionsnoschema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['simulation_id', 'nodes', 'networks', 'interfaces', 'type', 'step', 'count', 'datetype']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simengine_rest_counters_simulation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'simulation_id' is set
        if ('simulation_id' not in params) or (params['simulation_id'] is None):
            raise ValueError("Missing the required parameter `simulation_id` when calling `simengine_rest_counters_simulation_id_get`")


        collection_formats = {}

        path_params = {}
        if 'simulation_id' in params:
            path_params['simulation id'] = params['simulation_id']

        query_params = []
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))
            collection_formats['nodes'] = 'csv'
        if 'networks' in params:
            query_params.append(('networks', params['networks']))
            collection_formats['networks'] = 'csv'
        if 'interfaces' in params:
            query_params.append(('interfaces', params['interfaces']))
            collection_formats['interfaces'] = 'csv'
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'step' in params:
            query_params.append(('step', params['step']))
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'datetype' in params:
            query_params.append(('datetype', params['datetype']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/simengine/rest/counters/{simulation_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StdDefsJsondefinitionsnoschema',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
